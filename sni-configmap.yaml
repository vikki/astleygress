apiVersion: v1
kind: ConfigMap
metadata:
  name: egress-sni-proxy-configmap
  namespace: istio-system
data:
  nginx.conf: |
    pid /tmp/nginx.pid;

    events {
    }

    stream {
      log_format log_stream '$remote_addr [$time_local] $protocol [$ssl_preread_server_name]'
      '$status $bytes_sent $bytes_received $session_time';

      access_log /var/log/nginx/access.log log_stream;
      error_log  /var/log/nginx/error.log;

      # tcp forward proxy by SNI
      server {
        resolver 8.8.8.8 ipv6=off;
        listen       127.0.0.1:18443;
        proxy_pass   $ssl_preread_server_name:443;
        ssl_preread  on;
      }
    }
  config.yaml: |
    listen_port: 18443
    ssl_insecure: true
    showhost: true
    termlog_verbosity: debug
    console_eventlog_verbosity: debug
  addheader.py: |
    """Add an HTTP header to each response."""

    from flask import Flask
    from mitmproxy.addons import asgiapp
    import threading

    app = Flask("proxapp")
    data = 'foo'
    host_name = "0.0.0.0"
    port = 23336
    enabled = True
    addons = []

    class AddHeader:
      def __init__(self):
          self.num = 0
          threading.Thread(target=lambda: app.run(host=host_name, port=port, debug=True, use_reloader=False)).start()

      def response(self, flow):
        if enabled:
            self.num = self.num + 1
            flow.response.headers["count"] = str(self.num)

    addons = [
      AddHeader()
    ]

    @app.route('/')
    def hello_world() -> str:
        return 'Hello World! yay' + str(enabled)

    @app.route('/on')
    def on() -> str:
        global enabled
        enabled = True
        return 'whoo on'

    @app.route('/off')
    def off() -> str:
        global enabled
        enabled = False
        return 'whoo offf'

  wsgi_app.py: |
    """
    Host a WSGI app in mitmproxy.

    This example shows how to graft a WSGI app onto mitmproxy. In this
    instance, we're using the Flask framework (http://flask.pocoo.org/) to expose
    a single simplest-possible page.
    """
    from flask import Flask
    from mitmproxy.addons import asgiapp

    app = Flask("proxapp")


    @app.route('/')
    def hello_world() -> str:
        return 'Hello World!'


    addons = [
        # Host app at the magic domain "example.com" on port 80. Requests to this
        # domain and port combination will now be routed to the WSGI app instance.
        asgiapp.WSGIApp(app, "de.wikipedia.org", 80)
        # SSL works too, but the magic domain needs to be resolvable from the mitmproxy machine due to mitmproxy's design.
        # mitmproxy will connect to said domain and use serve its certificate (unless --no-upstream-cert is set)
        # but won't send any data.
        # mitmproxy.ctx.master.apps.add(app, "lol.wikipedia.org", 443)
    ]